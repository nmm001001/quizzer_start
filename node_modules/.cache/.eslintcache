[{"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/index.tsx":"1","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/reportWebVitals.ts":"2","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/App.tsx":"3","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/Quizzer.tsx":"4","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/AddQuizModal.tsx":"5","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizList.tsx":"6","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizView.tsx":"7","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizCard.tsx":"8","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizEdit.tsx":"9","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizExpanded.tsx":"10","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizQuestion.tsx":"11","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuestionEdit.tsx":"12","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/interfaces/quiz.ts":"13"},{"size":552,"mtime":1696986208376,"results":"14","hashOfConfig":"15"},{"size":519,"mtime":1696986208376,"results":"16","hashOfConfig":"15"},{"size":856,"mtime":1696986208376,"results":"17","hashOfConfig":"15"},{"size":4207,"mtime":1697059260758,"results":"18","hashOfConfig":"15"},{"size":2359,"mtime":1697037896599,"results":"19","hashOfConfig":"15"},{"size":1728,"mtime":1697059201754,"results":"20","hashOfConfig":"15"},{"size":1157,"mtime":1697039643895,"results":"21","hashOfConfig":"15"},{"size":1026,"mtime":1697048536867,"results":"22","hashOfConfig":"15"},{"size":6477,"mtime":1697051982756,"results":"23","hashOfConfig":"15"},{"size":3865,"mtime":1697052866570,"results":"24","hashOfConfig":"15"},{"size":3343,"mtime":1697053242665,"results":"25","hashOfConfig":"15"},{"size":11454,"mtime":1697042481842,"results":"26","hashOfConfig":"15"},{"size":173,"mtime":1696986208376,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15oocu0",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/index.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/reportWebVitals.ts",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/App.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/Quizzer.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/AddQuizModal.tsx",["58"],"import React, { Props, useState } from \"react\";\nimport { Button, Modal, Form } from \"react-bootstrap\";\n\nexport const AddQuizModal = ({\n    show,\n    handleClose,\n    addQuiz\n}: {show: boolean; handleClose: () => void; addQuiz: (title: string, body: string) => void;}) => {\n    const [title, setTitle] = useState<string>(\"Example Quiz\");\n    const [body, setBody] = useState<string>(\"Example Description\");\n\n    const saveChanges = () => {\n        addQuiz(title, body);\n        setTitle(\"Example Quiz\");\n        setBody(\"Example Description\");\n        handleClose();\n    };\n\n    return (\n        <div>\n            <Modal show={show} onHide={handleClose} animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add New Quiz</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Group controlId=\"formQuizId\">\n                        <Form.Label>Title: </Form.Label>\n                        <Form.Control\n                            value={title}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => setTitle(e.target.value)}\n                        ></Form.Control>\n                        <Form.Label>Description: </Form.Label>\n                        <Form.Control\n                            as=\"textarea\"\n                            rows={3}\n                            value={body}\n                            onChange={(\n                                e: React.ChangeEvent<HTMLInputElement>\n                            ) => setBody(e.target.value)}\n                        ></Form.Control>\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        variant=\"secondary\"\n                        onClick={() => {\n                            setTitle(\"Example Quiz\");\n                            setBody(\"Example Description\");\n                            handleClose();\n                        }}\n                    >\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={saveChanges}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    );\n};\n","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizList.tsx",["59"],"import React, { useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { Quiz } from \"../interfaces/quiz\";\nimport { QuizCard } from \"./QuizCard\";\nimport \"./QuizList.css\";\nimport { QuizView } from \"./QuizView\";\n\nexport const QuizList = ({\n    quizzes,\n    editQuiz,\n    deleteQuiz,\n    showModal\n}: {quizzes: Quiz[]; editQuiz: (id: number, updatedQuiz: Quiz) => void; deleteQuiz: (id: number) => void; showModal: () => void;}) => {\n    const [displayId, setDisplayId] = useState<null | number>(null);\n\n    const handleQuizView = (id: number) => {\n        setDisplayId(id);\n    };\n\n    const resetQuizView = () => {\n        setDisplayId(null);\n    };\n\n    return (\n        <div className=\"quiz_list\">\n            {!displayId && (\n                <>\n                    {quizzes.map((quiz: Quiz) => (\n                        <QuizCard\n                            key={quiz.id}\n                            quiz={quiz}\n                            handleClick={handleQuizView}\n                        ></QuizCard>\n                    ))}\n                    <Button className=\"add_btn\" onClick={showModal}>\n                        Add New Quiz\n                    </Button>\n                </>\n            )}\n            {quizzes.map((quiz: Quiz) => {\n                if (displayId === quiz.id) {\n                    return (\n                        <QuizView\n                            key={quiz.id}\n                            quiz={quiz}\n                            editQuiz={editQuiz}\n                            deleteQuiz={deleteQuiz}\n                            resetView={resetQuizView}\n                        ></QuizView>\n                    );\n                }\n            })}\n        </div>\n    );\n};\n","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizView.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizCard.tsx",["60"],"import React, { ChangeEvent } from \"react\";\nimport { Quiz } from \"../interfaces/quiz\";\n\nimport \"./QuizCard.css\";\nimport { Question } from \"../interfaces/question\";\n\nexport const QuizCard = ({\n    quiz,\n    handleClick\n}: {quiz: Quiz; handleClick: (quizID: number) => void;}) => {\n    const filteredQuestions = quiz.questionList.filter(\n        (q: Question): boolean =>\n            (quiz.published && q.published) || !quiz.published\n    );\n\n    return (\n        <div className=\"quiz_view_card\">\n            <div className=\"d-flex align-items-baseline\">\n                <h3\n                    className=\"title\"\n                    onClick={() => {\n                        handleClick(quiz.id);\n                    }}\n                >\n                    {quiz.title}\n                </h3>\n                <p>\n                    {filteredQuestions.length} question\n                    {filteredQuestions.length !== 1 ? \"s\" : \"\"}\n                </p>\n            </div>\n            <p>{quiz.body}</p>\n        </div>\n    );\n};\n","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizEdit.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizExpanded.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuizQuestion.tsx",[],"/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/quizzer/QuestionEdit.tsx",["61"],"import React, { useState } from \"react\";\nimport { Question, QuestionType } from \"../interfaces/question\";\n\nimport \"./QuestionEdit.css\";\nimport { Button, Form } from \"react-bootstrap\";\n\nexport const QuestionEdit = ({\n    index,\n    lastIndex,\n    question,\n    editQuestion,\n    removeQuestion,\n    swapQuestion\n}: {index: number; lastIndex: number; question: Question; editQuestion: (questionId: number, newQuestion: Question) => void; removeQuestion: (questionId: number) => void; swapQuestion: (idx1: number, idx2: number) => void;}) => {\n    const [a, b] = useState<number>(\n        question.options.findIndex((s: string) => question.expected === s)\n    );\n\n    const handleNumOptions = (e: React.ChangeEvent<HTMLInputElement>) => {\n        b(0);\n        const newNum =\n            parseInt(e.target.value) < 1 ? 1 : parseInt(e.target.value);\n        editQuestion(question.id, {\n            ...question,\n            type: \"multiple_choice_question\",\n            expected: \"Example Answer\",\n            options: Array(newNum).fill(\"Example Answer\")\n        });\n    };\n\n    const handleSwitch = () => {\n        b(0);\n        editQuestion(question.id, {\n            ...question,\n            type: \"multiple_choice_question\",\n            expected: \"Example Answer\",\n            options: Array(3).fill(\"Example Answer\")\n        });\n    };\n\n    const handlePoints = (e: React.ChangeEvent<HTMLInputElement>) => {\n    \tquestion.points = parseInt(e.target.value)\n        editQuestion(question.id, question);\n    };\n\n    const handleChoiceChange = (\n        e: React.ChangeEvent<HTMLInputElement>,\n        i: number\n    ) => {\n        const newOptions = [...question.options];\n        newOptions.splice(i, 1, e.target.value);\n        editQuestion(question.id, {\n            ...question,\n            options: newOptions,\n            expected: a === i ? e.target.value : question.expected\n        });\n    };\n\n    const handleRadioChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const idx = parseInt(e.target.value);\n        b(idx);\n        editQuestion(question.id, {\n            ...question,\n            expected: question.options[idx]\n        });\n    };\n\n    return (\n        <>\n            <hr />\n            <div className=\"edit_question\">\n                <div className=\"edit_title_row\">\n                    <div className=\"edit_title_box\">\n                        <h4>{index + 1}. </h4>\n                        <Form.Group\n                            className=\"title_input\"\n                            controlId=\"editTitleFormId\"\n                        >\n                            <Form.Control\n                                value={question.body}\n                                data-testid=\"edit_question_title\"\n                                onChange={(\n                                    e: React.ChangeEvent<HTMLInputElement>\n                                ) => {\n                                    editQuestion(question.id, {\n                                        ...question,\n                                        body: e.target.value\n                                    });\n                                }}\n                            ></Form.Control>\n                        </Form.Group>\n                    </div>\n                    <div className=\"edit_title_box\">\n                        <Form.Group\n                            className=\"points_input\"\n                            controlId=\"editPointsFormId\"\n                        >\n                            <Form.Control\n                                value={question.points}\n                                type=\"number\"\n                                onChange={handlePoints}\n                            ></Form.Control>\n                        </Form.Group>\n                        <h4>pt{question.points !== 1 ? \"s\" : \"\"}</h4>\n                    </div>\n                </div>\n                <div className=\"center_section\">\n                    <div className=\"edit_answer_box\">\n                        <div className=\"type_form\">\n                            <Form.Group controlId=\"questionTypeFormId\">\n                                <Form.Label>Type: </Form.Label>\n                                <Form.Select\n                                    className=\"type_dropdown\"\n                                    value={question.type}\n                                    onChange={handleSwitch}\n                                >\n                                    <option\n                                        data-testid={\n                                            \"question_type_dropdown_\" + index\n                                        }\n                                        value=\"multiple_choice_question\"\n                                    >\n                                        Multiple Choice\n                                    </option>\n                                    <option\n                                        data-testid={\n                                            \"question_type_dropdown_\" + index\n                                        }\n                                        value=\"short_answer_question\"\n                                    >\n                                        Short Answer\n                                    </option>\n                                </Form.Select>\n                            </Form.Group>\n                            {question.type === \"multiple_choice_question\" && (\n                                <>\n                                    <Form.Group controlId=\"editNumChoicesId\">\n                                        <Form.Label>Choices: </Form.Label>\n                                        <Form.Control\n                                            className=\"num_choices\"\n                                            value={question.options.length}\n                                            type=\"number\"\n                                            onChange={handleNumOptions}\n                                        ></Form.Control>\n                                    </Form.Group>\n                                </>\n                            )}\n                        </div>\n                        <div>\n                            {question.type === \"short_answer_question\" && (\n                                <Form.Group controlId=\"formEditShortExpectedBox\">\n                                    <Form.Label>Answer:</Form.Label>\n                                    <Form.Control\n                                        value={question.expected}\n                                        onChange={(\n                                            e: React.ChangeEvent<HTMLInputElement>\n                                        ) => {\n                                            editQuestion(question.id, {\n                                                ...question,\n                                                expected: e.target.value\n                                            });\n                                        }}\n                                    ></Form.Control>\n                                </Form.Group>\n                            )}\n                            {question.type === \"multiple_choice_question\" && (\n                                <Form.Group controlId=\"formEditMultipleExpectedBox\">\n                                    <Form.Label>Answer:</Form.Label>\n                                    {question.options.map(\n                                        (option: string, i: number) => (\n                                            <div\n                                                key={i}\n                                                className=\"radio_question_box\"\n                                            >\n                                                <Form.Check\n                                                    type=\"radio\"\n                                                    name={\n                                                        \"questionChoice\" + index\n                                                    }\n                                                    value={i}\n                                                    checked={a === i}\n                                                    onChange={handleRadioChange}\n                                                />\n                                                <Form.Control\n                                                    name={\n                                                        \"questionChoice\" + index\n                                                    }\n                                                    value={option}\n                                                    onChange={(\n                                                        e: React.ChangeEvent<HTMLInputElement>\n                                                    ) => {\n                                                        handleChoiceChange(\n                                                            e,\n                                                            i\n                                                        );\n                                                    }}\n                                                ></Form.Control>\n                                            </div>\n                                        )\n                                    )}\n                                </Form.Group>\n                            )}\n                        </div>\n                    </div>\n                    <div className=\"swap_button_container\">\n                        <Button\n                            disabled={index === 0}\n                            className=\"swap_button\"\n                            onClick={() => {\n                                swapQuestion(index, index - 1);\n                            }}\n                        >\n                            ▲\n                        </Button>\n                        <Button\n                            disabled={index === lastIndex}\n                            className=\"swap_button\"\n                            onClick={() => {\n                                swapQuestion(index, index + 1);\n                            }}\n                        >\n                            ▼\n                        </Button>\n                    </div>\n                </div>\n                <div className=\"edit_question_footer\">\n                    <Form.Check\n                        className=\"published_question_check\"\n                        data-testid=\"question_published_check\"\n                        type=\"checkbox\"\n                        id=\"is_question_published_check\"\n                        label=\"Published\"\n                        checked={question.published}\n                        onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n                            editQuestion(question.id, {\n                                ...question,\n                                published: e.target.checked\n                            });\n                        }}\n                    ></Form.Check>\n                    <Button\n                        variant=\"danger\"\n                        onClick={() => {\n                            removeQuestion(question.id);\n                        }}\n                    >\n                        Delete\n                    </Button>\n                </div>\n            </div>\n        </>\n    );\n};\n","/home/nathan/Desktop/Fall 2023/CISC 275/Tasks/task11/quizzer_start/src/interfaces/quiz.ts",[],{"ruleId":"62","severity":1,"message":"63","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":40,"column":39,"nodeType":"68","messageId":"69","endLine":40,"endColumn":41},{"ruleId":"62","severity":1,"message":"70","line":1,"column":17,"nodeType":"64","messageId":"65","endLine":1,"endColumn":28},{"ruleId":"62","severity":1,"message":"71","line":2,"column":20,"nodeType":"64","messageId":"65","endLine":2,"endColumn":32},"@typescript-eslint/no-unused-vars","'Props' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'ChangeEvent' is defined but never used.","'QuestionType' is defined but never used."]